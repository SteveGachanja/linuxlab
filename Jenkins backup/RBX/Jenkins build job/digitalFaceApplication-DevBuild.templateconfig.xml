<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>digitalFaceApplication-DevBuild</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.35">
      <gitLabConnection>Digital_Factory</gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.12.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>http://172.16.206.56:8080/tfs/CoOp_Collection/Omni-CBI-Integration/_git/RBX-CBI</url>
        <credentialsId>55f97809-0207-42ed-a850-5a5a49fdc98d</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/${DEV_GIT_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <gitTool>OMNI-JENKINS-GITCLIENT</gitTool>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.4.1">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.5"/>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>set +x
echo &quot;====================================================================&quot;

seconds=$(($(date +&apos;%s&apos;) - $start))
minutes=$(echo `expr $seconds / 60`)
echo &quot;It took approx. $minutes minute(s)/ exactly ($seconds seconds) to fetch $BUILD_TAG&quot;
echo &quot;====================================================================&quot;</command>
          <configuredLocalRules/>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>set +x
echo &quot;=================================================================&quot;
echo &quot;SET Develop VARIABLES ...&quot;
echo &quot;=================================================================&quot;

git pull origin $DEV_GIT_BRANCH
git checkout -b $DEV_GIT_BRANCH
git branch

#---------------------------------------------------------------------------------------------
#SET VARIABLES

git log -1 --merges
#---------------------------------------------------------------------------------------------

if [ ! -z &quot;$(git diff --diff-filter=ACMR --name-only HEAD~1 HEAD~0 | grep MH_HOME/EAR)&quot; ] ;
then
DEV_AUTHOR=$(git log -1 Source/ | grep Author | awk -F &apos;[:&lt;]&apos; &apos;{print $2}&apos; | tr -dc &apos;[:alnum:]\n\r&apos; | awk -F &quot;DigitalBanking&quot; &apos;{print $1}&apos; | tr -d &quot;[:blank:]&quot;)

elif [ ! -z &quot;$K1_BUILD_USER_ID&quot; ] ;
then
DEV_AUTHOR=$K1_BUILD_USER_ID

else
DEV_AUTHOR=$(git log -1 | grep Author | awk -F &apos;[:&lt;]&apos; &apos;{print $2}&apos; | tr -dc &apos;[:alnum:]\n\r&apos; | awk -F &quot;DigitalBanking&quot; &apos;{print $1}&apos; | tr -d &quot;[:blank:]&quot;)
fi
#---------------------------------------------------------------------------------------------

PULL_REQUEST_ID=`git log -1 --merges | grep PR | head -n 1`
BRANCH_COMMIT_ID=`git log -1 --merges|grep Merge:|awk -v N=3 &apos;{print $3}&apos;`
echo &quot;&quot; &amp;&amp; echo &quot;Feature branch commit ID: $BRANCH_COMMIT_ID&quot;
echo &quot;=================================================================&quot;
git log -20 --oneline
echo &quot;=================================================================&quot;

UNFORMATTED_MERGED_FEATURE=`git name-rev --name-only $BRANCH_COMMIT_ID`
MERGED_FEATURE=`echo $UNFORMATTED_MERGED_FEATURE |  awk -F&apos;remotes/origin/&apos; &apos;{ print $2 }&apos; |  awk -F&apos;[~^]&apos; &apos;{ print $1 }&apos;`

#-----------------------------------------------------------------------------------------------
#WRITE NEW DEV_REMOTE_COMMIT_ID
echo &quot;&quot;
count_log=`cat ${ARCHIVE_WORKSPACE}/changelog-DEV/DEV_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | wc -l`

if [ $count_log = 0 ];
then
echo &quot;count_log :: $count_log&quot;
{ echo -n `git ls-remote | grep heads | grep $BRANCH_COMMIT_ID`; echo -n &quot; $BUILD_TIMESTAMP&quot;; echo &quot; $BUILD_USER_ID&quot;; } &gt;&gt; ${ARCHIVE_WORKSPACE}/changelog-DEV/DEV_REMOTE_COMMIT_ID.log || echo &quot;Warning :: BRANCH_COMMIT_ID is empty&quot;
DEV_REMOTE_COMMIT_ID=`cat ${ARCHIVE_WORKSPACE}/changelog-DEV/DEV_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | awk -F &quot;refs/heads/&quot; &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;`
else
echo &quot;count_log :: $count_log&quot;
DEV_REMOTE_COMMIT_ID=`cat ${ARCHIVE_WORKSPACE}/changelog-DEV/DEV_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | awk -F &quot;refs/heads/&quot; &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;`
fi

DEV_LOCAL_COMMIT_ID=`cat ${ARCHIVE_WORKSPACE}/changelog-DEV/DEV_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | tail -n 1 | awk -F &quot;refs/heads/&quot; &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;`
SIT_LOCAL_COMMIT_ID=`cat ${ARCHIVE_WORKSPACE}/changelog-SIT/SIT_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | tail -n 1 | awk -F &quot;refs/heads/&quot; &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;`
UAT_LOCAL_COMMIT_ID=`cat ${ARCHIVE_WORKSPACE}/changelog-UAT/UAT_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | tail -n 1 | awk -F &quot;refs/heads/&quot; &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;`
PREPROD_LOCAL_COMMIT_ID=`cat ${ARCHIVE_WORKSPACE}/changelog-PREPROD/PREPROD_REMOTE_COMMIT_ID.log | grep $BRANCH_COMMIT_ID | tail -n 1 | awk -F &quot;refs/heads/&quot; &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;`

if [[ $MERGED_FEATURE = &quot;&quot; ]] ;
then
echo &quot;&quot;
echo &quot;WARNING :: MERGED_FEATURE is EMPTY, PROCEED BUILD WITH CAUTION&quot;
echo &quot;&quot;
else
echo &quot;CHECK $DEV_GIT_BRANCH MERGED_STATUS of FEATURE $MERGED_FEATURE &quot;
fi

IS_DIT_MERGED=`git branch -r --merged origin/$DEV_GIT_BRANCH | grep $MERGED_FEATURE 2&gt;/dev/null | wc -l`
IS_SIT_MERGED=`git branch -r --merged origin/$SIT_GIT_BRANCH | grep $MERGED_FEATURE 2&gt;/dev/null | wc -l`
IS_UAT_MERGED=`git branch -r --merged origin/$UAT_GIT_BRANCH | grep $MERGED_FEATURE 2&gt;/dev/null | wc -l`
IS_PREPROD_MERGED=`git branch -r --merged origin/$PREPROD_GIT_BRANCH | grep $MERGED_FEATURE 2&gt;/dev/null | wc -l`
IS_COMMIT_EMPTY=`git diff --diff-filter=ACMR --name-only HEAD~1 HEAD~0 | wc -l`
echo &quot;&quot;

#-----------------------------------------------------------------------------------------------
#Set DB_Migration Variables
TOPMOST_DEV_COMMIT_ID=$(git log -1 --oneline | awk &apos;{print $01}&apos; | tr -d &quot;[:blank:]&quot;)
LAST_DEV_COMMIT_ID=122f6a
#-----------------------------------------------------------------------------------------------

PROPERTY_FILE=DEV_MODULE_01_variables.property

echo &quot;BUILD_ID=$BUILD_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;BUILD_TAG=$BUILD_TAG&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;BUILD_USER_ID=$BUILD_USER_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;BUILD_USER=$BUILD_USER&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;BUILD_TIMESTAMP=$BUILD_TIMESTAMP&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;DEV_GIT_BRANCH=$DEV_GIT_BRANCH&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;K1_BUILD_USER_ID=$K1_BUILD_USER_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;K1_CHANGE_APPROVALS=$K1_CHANGE_APPROVALS&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;DEV_AUTHOR=$DEV_AUTHOR&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;BRANCH_COMMIT_ID=$BRANCH_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;MERGED_FEATURE=$MERGED_FEATURE&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;PULL_REQUEST_ID=$PULL_REQUEST_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;DEV_REMOTE_COMMIT_ID=$DEV_REMOTE_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;IS_DIT_MERGED=$IS_DIT_MERGED&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;IS_SIT_MERGED=$IS_SIT_MERGED&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;IS_UAT_MERGED=$IS_UAT_MERGED&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;IS_PREPROD_MERGED=$IS_PREPROD_MERGED&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;DEV_LOCAL_COMMIT_ID=$DEV_LOCAL_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;SIT_LOCAL_COMMIT_ID=$SIT_LOCAL_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;UAT_LOCAL_COMMIT_ID=$UAT_LOCAL_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;PREPROD_LOCAL_COMMIT_ID=$PREPROD_LOCAL_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;IS_COMMIT_EMPTY=$IS_COMMIT_EMPTY&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;EXCEPTION_BUILD=$EXCEPTION_BUILD&quot; &gt;&gt; $PROPERTY_FILE

echo &quot;TOPMOST_DEV_COMMIT_ID=$TOPMOST_DEV_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;LAST_DEV_COMMIT_ID=$LAST_DEV_COMMIT_ID&quot; &gt;&gt; $PROPERTY_FILE
echo &quot;&quot;
#-----------------------------------------------------------------------------------------------</command>
          <configuredLocalRules/>
        </hudson.tasks.Shell>
        <EnvInjectBuilder plugin="envinject@2.4.0">
          <info>
            <propertiesFilePath>DEV_MODULE_01_variables.property</propertiesFilePath>
          </info>
        </EnvInjectBuilder>
        <hudson.tasks.Shell>
          <command>set +x
echo &quot;===============================================================================================&quot;
echo &quot;MERGED_FEATURE &lt; $MERGED_FEATURE &gt; points to BRANCH_COMMIT_ID &lt; $BRANCH_COMMIT_ID &gt; Ref TFS.&quot;
echo &quot;===============================================================================================&quot;
echo &quot;RECORDED VARIABLES OF BUILD :: $BUILD_TAG&quot;
echo &quot;===============================================================================================&quot;

echo &quot;&quot;
echo &quot;DEV_GIT_BRANCH::$DEV_GIT_BRANCH&quot;
echo &quot;BUILD_TIMESTAMP::$BUILD_TIMESTAMP&quot;
echo &quot;BUILD_ID::$BUILD_ID&quot;
echo &quot;BUILD_TAG::$BUILD_TAG&quot;
echo &quot;&quot;
echo &quot;BUILD_USER::$BUILD_USER&quot;
echo &quot;BUILD_USER_ID::$BUILD_USER_ID&quot;
cat $CAPABILITIES_FILE || echo &quot;ERROR :: CAPABILITIES file not available&quot;
echo &quot;&quot;
echo &quot;K1_BUILD_USER_ID::$K1_BUILD_USER_ID&quot;
echo &quot;K1_CHANGE_APPROVALS::$K1_CHANGE_APPROVALS&quot;
echo &quot;&quot;
echo &quot;DEV_AUTHOR::$DEV_AUTHOR&quot;
echo &quot;BRANCH_COMMIT_ID::$BRANCH_COMMIT_ID&quot;
echo &quot;MERGED_FEATURE::$MERGED_FEATURE&quot;
echo &quot;PULL_REQUEST_ID::$PULL_REQUEST_ID&quot;
echo &quot;DEV_REMOTE_COMMIT_ID::$DEV_REMOTE_COMMIT_ID&quot;
echo &quot;&quot;
echo &quot;$DEV_GIT_BRANCH merged status $IS_DIT_MERGED&quot;
echo &quot;$SIT_GIT_BRANCH merged status $IS_SIT_MERGED&quot;
echo &quot;$UAT_GIT_BRANCH merged status $IS_UAT_MERGED&quot;
echo &quot;$PREPROD_GIT_BRANCH merged status $IS_PREPROD_MERGED&quot;
echo &quot;&quot;
if [[ $DEV_LOCAL_COMMIT_ID = &quot;&quot; ]]; then echo &quot;Feature $MERGED_FEATURE is NOT BUILT into DEV&quot; ; else echo &quot;Feature $MERGED_FEATURE is BUILT into DEV:: DEV_COMMIT_ID :: $DEV_LOCAL_COMMIT_ID&quot; ; fi
if [[ $SIT_LOCAL_COMMIT_ID = &quot;&quot; ]]; then echo &quot;Feature $MERGED_FEATURE is NOT BUILT into SIT&quot; ; else echo &quot;Feature $MERGED_FEATURE is BUILT into SIT:: SIT_COMMIT_ID :: $SIT_LOCAL_COMMIT_ID&quot; ; fi
if [[ $UAT_LOCAL_COMMIT_ID = &quot;&quot; ]]; then echo &quot;Feature $MERGED_FEATURE is NOT BUILT into UAT&quot; ; else echo &quot;Feature $MERGED_FEATURE is BUILT into UAT:: UAT_COMMIT_ID :: $UAT_LOCAL_COMMIT_ID&quot; ; fi
if [[ $PREPROD_LOCAL_COMMIT_ID = &quot;&quot; ]]; then echo &quot;Feature $MERGED_FEATURE is NOT BUILT into PREPROD&quot; ; else echo &quot;Feature $MERGED_FEATURE is BUILT into PREPROD:: PREPROD_COMMIT_ID :: $PREPROD_LOCAL_COMMIT_ID&quot; ; fi
echo &quot;&quot;
echo &quot;GIT COMMIT DIFFERENCES status $IS_COMMIT_EMPTY&quot;
echo &quot;EXCEPTION_BUILD::$EXCEPTION_BUILD&quot;
echo &quot;&quot;
echo &quot;===============================================================================================&quot;
echo &quot;:: CHANGES MADE ON THIS COMMIT ::&quot;
echo &quot;-----------------------------------------------------------------------------------------------&quot;
git diff --diff-filter=ACMR --name-only HEAD~1 HEAD~0
echo &quot;===============================================================================================&quot;</command>
          <configuredLocalRules/>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>set +x
echo &quot;&quot;
echo &quot;==================================================================&quot;
echo &quot;MODULE 01:: VERIFY PREVIOUS BUILD COMMITS on $DEV_GIT_BRANCH&quot;
echo &quot;==================================================================&quot;
echo &quot;&quot;

echo &quot;-----------------------------------------------------------------------------------------&quot;

echo &quot;Fetching MERGED_FEATURE :: $MERGED_FEATURE ...&quot;
git fetch origin $MERGED_FEATURE:$MERGED_FEATURE || echo &quot;Error could not find $MERGED_FEATURE&quot;
git checkout $MERGED_FEATURE
echo &quot;&quot;

echo &quot;-----------------------------------------------------------------------------------------&quot;

#AVOIDS THE RENAMING OF FEATURE BRANCHES COMMITTED IN SIT-SYSTEM BRANCH

if [[ $MERGED_FEATURE == *SIT_* ]] &amp;&amp; [[ $DEV_REMOTE_COMMIT_ID == $SIT_LOCAL_COMMIT_ID ]] ;
then
echo &quot;$MERGED_FEATURE :: This is already a FUTURE SIT_FEATURE_BRANCH&quot;
echo &quot;DEV_REMOTE_COMMIT_ID :: $DEV_REMOTE_COMMIT_ID&quot;
echo &quot;SIT_LOCAL_COMMIT_ID :: $SIT_LOCAL_COMMIT_ID&quot;
git ls-remote | grep $MERGED_FEATURE
echo &quot;&quot;
exit 0

#AVOIDS THE RENAMING OF FEATURE BRANCHES COMMITTED IN UAT-SYSTEM BRANCH

elif [[ $MERGED_FEATURE == *UAT_* ]] &amp;&amp; [[ $DEV_REMOTE_COMMIT_ID == $UAT_LOCAL_COMMIT_ID ]] ;
then
echo &quot;$MERGED_FEATURE :: This is already a FUTURE UAT_FEATURE_BRANCH&quot;
echo &quot;DEV_REMOTE_COMMIT_ID :: $DEV_REMOTE_COMMIT_ID&quot;
echo &quot;UAT_LOCAL_COMMIT_ID :: $UAT_LOCAL_COMMIT_ID&quot;
git ls-remote | grep $MERGED_FEATURE
echo &quot;&quot;
exit 0

#AVOIDS THE RENAMING OF FEATURE BRANCHES COMMITTED IN PREPROD-SYSTEM BRANCH

elif [[ $MERGED_FEATURE == *PREPROD_* ]] &amp;&amp; [[ $DEV_REMOTE_COMMIT_ID == $PREPROD_LOCAL_COMMIT_ID ]] ;
then
echo &quot;$MERGED_FEATURE :: This is already a FUTURE PREPROD_FEATURE_BRANCH&quot;
echo &quot;DEV_REMOTE_COMMIT_ID :: $DEV_REMOTE_COMMIT_ID&quot;
echo &quot;PREPROD_LOCAL_COMMIT_ID :: $PREPROD_LOCAL_COMMIT_ID&quot;
git ls-remote | grep $MERGED_FEATURE
echo &quot;&quot;
exit 0

#-----------------------------------------------------------------------------------------------
#COMMIT IS EMPTY , BUT FEATURE MERGED INTO DEV 

elif [ $IS_COMMIT_EMPTY == 0 ] &amp;&amp; [ $IS_DIT_MERGED &gt; 1 ] ;
then
echo &quot;&quot;
echo &quot; *** COMMIT IS EMPTY , BUT FEATURE IS MERGED INTO $DEV_GIT_BRANCH -- ALLOW PASS *** &quot;
echo &quot;&quot;

#------------------------------------------------------------------------------------------------
#FAIL RENAMING IF FEATURE BRANCH IS EMPTY OR IS EQUAL TO A SYSTEM BRANCH

elif [[ $MERGED_FEATURE = &quot;&quot; ]] || [[ $MERGED_FEATURE == *$DEV_GIT_BRANCH* ]] || [[ $MERGED_FEATURE == *$SIT_GIT_BRANCH* ]] || [[ $MERGED_FEATURE == *$UAT_GIT_BRANCH* ]] || [[ $MERGED_FEATURE == *$PREPROD_GIT_BRANCH* ]] || [[ $MERGED_FEATURE == *$PROD_GIT_BRANCH* ]];
then
echo &quot; &quot;
echo &quot;----  WARNING :: Branch-renaming failed because MERGED feature branch is EMPTY or is a SYSTEM RELEASE BRANCH ==&gt; $MERGED_FEATURE ------&quot;
echo &quot; &quot;
exit 0

#------------------------------------------------------------------------------------------------------
#IF FEATURE BRANCH IS CONFLICT_ PROCEED REMOVE PREFIX AND RENAME

elif [[ $MERGED_FEATURE == *CONFLICT_* ]] || [[ $MERGED_FEATURE == *Conflict_* ]] || [[ $MERGED_FEATURE == *CONFLICT-* ]] ;
then

echo &quot;&quot;
echo &quot;MERGED_FEATURE :: $MERGED_FEATURE *** Mark this as a CONFLICT branch ... *** &quot; &amp;&amp; echo &quot;&quot;
echo &quot;Attempt to retrieve the original feature branch ...&quot; &amp;&amp; echo &quot;&quot;

for x in $(git ls-remote | grep head | grep CONFLICT | awk -F &quot;refs/heads/&quot; &apos;{print $02}&apos; | grep $MERGED_FEATURE || echo &quot;ERROR::Did_not_find_CONFLICT-BRANCH&quot;);
do
CONFLICT_BRANCH=$x
echo CONFLICT_BRANCH :: $CONFLICT_BRANCH

FEATURE_BRANCH=$(git ls-remote | grep heads | grep $CONFLICT_BRANCH | awk -F &quot;CONFLICT_&quot; &apos;{print $NF}&apos; | awk -F &quot;Conflict_&quot; &apos;{print $NF}&apos; | awk -F &quot;CONFLICT-&quot; &apos;{print $NF}&apos;)
echo FEATURE_BRANCH :: $FEATURE_BRANCH

done

#CONFIRM_FEATURE_BRANCH
count=$(git ls-remote | grep heads | grep -v $CONFLICT_BRANCH | grep $FEATURE_BRANCH | wc -l)
if [ $count -eq 1 ] ; then echo CONFIRM_FEATURE_BRANCH :: $FEATURE_BRANCH; else echo &quot;** WARNING *** $FEATURE_BRANCH FEATURE_BRANCH NOT FOUND!&quot; &amp;&amp; exit 0; fi

# GET RAW_FEATURE
RAW_FEATURE=`echo $FEATURE_BRANCH | awk -F&apos;SIT_&apos; &apos;{ print $NF }&apos;| awk -F&apos;UAT_&apos; &apos;{ print $NF }&apos; | awk -F&apos;PREPROD_&apos; &apos;{ print $NF }&apos;`
echo &quot;RAW_MERGED_FEATURE&quot;::$RAW_FEATURE


#----------------------------------------------------------------------------

echo &quot;&quot;
echo &quot;Fetching FEATURE_BRANCH $FEATURE_BRANCH ...&quot;
git fetch origin $FEATURE_BRANCH:$FEATURE_BRANCH
git checkout $FEATURE_BRANCH
echo &quot;&quot;

#-------------------------------------------------------------

#Delete all similar existing upstream branches
#git ls-remote | grep heads | grep -v CONFLICT | grep $RAW_FEATURE | awk -F &quot; &quot; &apos;{print $2}&apos; &gt; feature_list.log
git ls-remote | grep heads | grep $RAW_FEATURE | awk -F &quot; &quot; &apos;{print $2}&apos; &gt; feature_list.log

echo &quot;&quot; &amp;&amp; echo &quot;--------------------------------------------&quot;
echo &quot;check if feature_branch exists and remove PREFIX ...&quot;
ls -lrt feature_list.log &amp;&amp; cat feature_list.log
echo &quot;--------------------------------------------&quot; &amp;&amp; echo &quot;&quot;

cat feature_list.log | while read feature_list;
do `git push origin :&quot;$feature_list&quot;`
done

#Push FEATURE_BRANCH
git push origin $FEATURE_BRANCH
git ls-remote | grep heads | grep $FEATURE_BRANCH
echo &quot;&quot;

#-----------------------------------------------------------------------------------------------------
#IF FEATURE BRANCH IS SIT_/UAT_/PREPROD_ PROCEED TO REMOVE PREFIX AND RENAME

elif [[ $MERGED_FEATURE == *SIT_* ]] || [[ $MERGED_FEATURE == *UAT_* ]] || [[ $MERGED_FEATURE == *PREPROD_* ]] ;
then

echo &quot;&quot;
echo &quot;This is a modified SIT_/UAT_/PREPROD_ feature branch :: MERGED_FEATURE :: $MERGED_FEATURE&quot; &amp;&amp; echo &quot;&quot;

#Delete all similar existing upstream branches
RAW_MERGED_FEATURE=`echo $MERGED_FEATURE | awk -F&apos;SIT_&apos; &apos;{ print $NF }&apos;| awk -F&apos;UAT_&apos; &apos;{ print $NF }&apos; | awk -F&apos;PREPROD_&apos; &apos;{ print $NF }&apos;`
DEV_FEATURE_BRANCH=$RAW_MERGED_FEATURE
git branch -m $DEV_FEATURE_BRANCH
echo &quot;&quot;
git ls-remote | grep heads | grep -v CONFLICT | grep $RAW_MERGED_FEATURE | awk -F &quot; &quot; &apos;{print $2}&apos; &gt; feature_list.log

echo &quot;&quot; &amp;&amp; echo &quot;--------------------------------------------&quot;
echo &quot;check_if_similar_branches_exist and remove PREFIX_ ...&quot;
ls -lrt feature_list.log &amp;&amp; cat feature_list.log
echo &quot;--------------------------------------------&quot; &amp;&amp; echo &quot;&quot;

cat feature_list.log | while read feature_list;
do `git push origin :&quot;$feature_list&quot;`
done

#Push DEV_feature_branch
git push origin $DEV_FEATURE_BRANCH
git ls-remote | grep heads | grep $DEV_FEATURE_BRANCH
echo &quot;&quot;

#-----------------------------------------------------------------------------------------------------
#THIS IS A DEVELOP BRANCH
else

echo &quot;&quot;
echo &quot;This is a develop feature branch :: MERGED_FEATURE :: $MERGED_FEATURE&quot; &amp;&amp; echo &quot;&quot;

#Delete all similar existing upstream branches

RAW_MERGED_FEATURE=`echo $MERGED_FEATURE | awk -F&apos;SIT_&apos; &apos;{ print $NF }&apos;| awk -F&apos;UAT_&apos; &apos;{ print $NF }&apos; | awk -F&apos;PREPROD_&apos; &apos;{ print $NF }&apos;`
DEV_FEATURE_BRANCH=$RAW_MERGED_FEATURE
git ls-remote | grep heads | grep -v CONFLICT | grep $RAW_MERGED_FEATURE | awk -F &quot; &quot; &apos;{print $2}&apos; &gt; feature_list.log

echo &quot;&quot; &amp;&amp; echo &quot;--------------------------------------------&quot;
echo &quot;check_if_similar_branches_exist ... ...&quot;
ls -lrt feature_list.log &amp;&amp; cat feature_list.log 
echo &quot;--------------------------------------------&quot; &amp;&amp; echo &quot;&quot;

cat feature_list.log | while read feature_list;
do `git push origin :&quot;$feature_list&quot;`
done

#Push DEV_feature_branch
git push origin $DEV_FEATURE_BRANCH
git ls-remote | grep heads | grep $DEV_FEATURE_BRANCH

echo &quot;--------------------------------------------------------------------------------------------&quot; &amp;&amp; echo &quot;&quot;

fi</command>
          <configuredLocalRules/>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>set +x
git checkout $DEV_GIT_BRANCH
git pull origin $DEV_GIT_BRANCH
git branch
echo &quot;-------------------------------------------------------------------&quot;
echo &quot;Creating change release log for $DEV_GIT_BRANCH BRANCH ... &quot;

mkdir -p ${ARCHIVE_WORKSPACE}/changelog-DEV/logdir-DF-&quot;$BUILD_ID&quot;
git diff --diff-filter=ACMR --name-only HEAD~1 HEAD~0 &gt; ${ARCHIVE_WORKSPACE}/changelog-DEV/logdir-DF-&quot;$BUILD_ID&quot;/changedfiles-&quot;$BUILD_ID&quot;.log
ls -1drt ${ARCHIVE_WORKSPACE}/changelog-DEV/*logdir-DF* | head -n -4 | awk -F / &apos;{print $NF}&apos; | while read files; do rm -rf ${ARCHIVE_WORKSPACE}/changelog-DEV/&quot;$files&quot;; done

cat ${ARCHIVE_WORKSPACE}/changelog-DEV/logdir-DF-&quot;$BUILD_ID&quot;/changedfiles-&quot;$BUILD_ID&quot;.log | while read files; do
rsync -avzhq --relative --ignore-missing-args ./$files ${ARCHIVE_WORKSPACE}/changelog-DEV/logdir-DF-&quot;$BUILD_ID&quot;/
done
echo &quot;-------------------------------------------------------------------&quot;
viewchangelog_file=${ARCHIVE_WORKSPACE}/changelog-DEV/logdir-DF-&quot;$BUILD_ID&quot;/changedfiles-&quot;$BUILD_ID&quot;.log
echo $viewchangelog_file &amp;&amp; cat $viewchangelog_file
echo &quot;-------------------------------------------------------------------&quot;
echo &quot;Creating change release log for Resource bin files&quot;

git diff --diff-filter=ACMR --name-only $LAST_DEV_COMMIT_ID $TOPMOST_DEV_COMMIT_ID | grep Source/Resources/bin &gt; ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-Resource-bin-files/Resource-bin-files.log || echo &quot;No changes..Empty log..&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-Resource-bin-files/Resource-bin-files.log | while read files; do
rsync -avzhq --delete --relative --ignore-missing-args ./$files ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-Resource-bin-files/
done
echo &quot;-------------------------------------------------------------------&quot;
echo &quot;Sending Resource bin files&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-Resource-bin-files/Resource-bin-files.log
scp -r ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-Resource-bin-files $SSH_ENVIRONMENT:$TARGET_REMOTE_WEBLOGIC
scp -r ${ARCHIVE_WORKSPACE}/changelog-DEV/logdir-DF-&quot;$BUILD_ID&quot; $SSH_ENVIRONMENT:$TARGET_REMOTE_WEBLOGIC
echo &quot;-----------------------------------------------------------------------------------&quot;
echo &quot;Creating change release log for DBMigration Scripts ... &quot;

echo [DBMigration_CT Scripts ...]
git diff --diff-filter=ACMR --name-only $LAST_DEV_COMMIT_ID $TOPMOST_DEV_COMMIT_ID | grep DBMigration_CT &gt; ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-CT/DBMigration-CT-&quot;$BUILD_ID&quot;.log || echo &quot;No changes....Empty log ...&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-CT/DBMigration-CT-&quot;$BUILD_ID&quot;.log | while read files; do
rsync -avzhq --ignore-missing-args ./$files ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-CT/RENAMED_SCRIPTS/&quot;$(echo &quot;$files&quot; | awk -F &quot;/&quot; &apos;{print $NF}&apos; | sed -e &apos;s#CT-COOP#R__CT-COOP#g&apos;)&quot;
done
echo &quot;-------------------------------------------------------------------&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-CT/DBMigration-CT-&quot;$BUILD_ID&quot;.log
ls -rt ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-CT/*.log | head -n -1 | while read files; do rm $files; done
echo &quot;-------------------------------------------------------------------&quot;

echo [DBMigration_DF Scripts ...]
git diff --diff-filter=ACMR --name-only $LAST_DEV_COMMIT_ID $TOPMOST_DEV_COMMIT_ID | grep DBMigration_DF &gt; ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-DF/DBMigration-DF-&quot;$BUILD_ID&quot;.log || echo &quot;No changes....Empty log ...&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-DF/DBMigration-DF-&quot;$BUILD_ID&quot;.log | while read files; do
rsync -avzhq --ignore-missing-args ./$files ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-DF/RENAMED_SCRIPTS/&quot;$(echo &quot;$files&quot; | awk -F &quot;/&quot; &apos;{print $NF}&apos; | sed -e &apos;s#DF-COOP#R__DF-COOP#g&apos;)&quot;
done
echo &quot;-------------------------------------------------------------------&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-DF/DBMigration-DF-&quot;$BUILD_ID&quot;.log
ls -rt ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-DF/*.log | head -n -1 | while read files; do rm $files; done
echo &quot;-------------------------------------------------------------------&quot;

echo [DBMigration_MH Scripts ...]
git diff --diff-filter=ACMR --name-only $LAST_DEV_COMMIT_ID $TOPMOST_DEV_COMMIT_ID | grep DBMigration_MH &gt; ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-MH/DBMigration-MH-&quot;$BUILD_ID&quot;.log || echo &quot;No changes....Empty log ...&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-MH/DBMigration-MH-&quot;$BUILD_ID&quot;.log | while read files; do
rsync -avzhq --delete-after --ignore-missing-args ./$files ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-MH/RENAMED_SCRIPTS/&quot;$(echo &quot;$files&quot; | awk -F &quot;/&quot; &apos;{print $NF}&apos; | sed -e &apos;s#MH_COOP#R__MH-COOP#g&apos;)&quot;
rsync -avzhq --delete-after --ignore-missing-args ./$files ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-MH/RENAMED_SCRIPTS/&quot;$(echo &quot;$files&quot; | awk -F &quot;/&quot; &apos;{print $NF}&apos; | sed -e &apos;s#MH-COOP#R__MH-COOP#g&apos;)&quot;
done
echo &quot;-------------------------------------------------------------------&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-MH/DBMigration-MH-&quot;$BUILD_ID&quot;.log
ls -rt ${BUILD_ARCHIVE_WORKSPACE}/Dev-DBmigrate-MH/*.log | head -n -1 | while read files; do rm $files; done
echo &quot;-------------------------------------------------------------------&quot;

echo &quot;[ Creating cummulative log for DBMigration files ]&quot;

git diff --diff-filter=ACMR --name-only $LAST_SIT_COMMIT_ID $TOPMOST_DEV_COMMIT_ID | grep DBMigration &gt; ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-DBMigration-scripts/DBMigration.log || echo &quot;No changes..Empty log..&quot;
cat ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-DBMigration-scripts/DBMigration.log | while read files; do
rsync -avzhq --relative --ignore-missing-args ./$files ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-DBMigration-scripts/
done
echo &quot;-------------------------------------------------------------------&quot;
echo &quot;Sending DBMigration files&quot;
scp -r ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-DBMigration-scripts $SSH_ENVIRONMENT:$TARGET_REMOTE_WEBLOGIC
scp ${BUILD_ARCHIVE_WORKSPACE}/Cummulative-DBMigration-scripts/DBMigration.log $SSH_ENVIRONMENT:$TARGET_REMOTE_WEBLOGIC

echo &quot;-----------------------------------------------------------------------------------&quot;

</command>
          <configuredLocalRules/>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <hudson.tasks.Shell>
      <command>set +x
echo &quot;&quot;
echo &quot;------------------------------------------------------------------------------&quot;
echo &quot;CHANGING K1_LOCATION BUILD, BANK.PROPERTIES, and APPLYING K1 EAR FILE :: $BUILD_TIMESTAMP&quot;
echo &quot;------------------------------------------------------------------------------&quot;

sed -i &apos;s#../../K1_EAR/OmniBuilds/K1_OUTPUT#&apos;&quot;$ARCHIVE_WORKSPACE&quot;&apos;/K1_EAR/OmniBuilds/DEV#g&apos; bank.properties
cat bank.properties | grep K1_LOCATION

K1_EAR_PATH=$ARCHIVE_WORKSPACE/K1_EAR/OmniBuilds
rsync -avzh $K1_EAR_PATH/K1_OUTPUT/digitalFaceApplication_IBMB_18.2.0.0.ear $K1_EAR_PATH/DEV/
ls -lrt $K1_EAR_PATH/DEV/
ls -lrt $K1_EAR_PATH/K1_OUTPUT/ | grep -v &quot;digitalFaceApplication&quot; | grep -v &quot;output&quot;

echo &quot;------------------------------------------------------------------------------&quot;</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>set +x
echo &quot;==========================================================================&quot;
echo &quot;APPLYING develop-Staging CSS STYLES ... &quot;
echo &quot;-------------------------------------------------------------------------&quot;

css_changes_path=../../OmniBuilds/changelog-DEV/CSS-Changes
iportal_css_path=./Source/iportalweb/WebContent/iportal/css/style/dfbase/jqtbs
echo css_changes_path $css_changes_path

rsync -avzh $css_changes_path/dfbase-jqtbs-ltr.css $iportal_css_path/dfbase-jqtbs-ltr.css
rsync -avzh $css_changes_path/jqtbs-dfbase-app.css $iportal_css_path/jqtbs-dfbase-app.css

ls -lrt $iportal_css_path/dfbase-jqtbs-ltr.css
ls -lrt $iportal_css_path/jqtbs-dfbase-app.css

echo &quot;==========================================================================&quot;
echo &quot;APPLYING ANGULAR PRELOGIN CHANGES ... &quot;
echo &quot;-------------------------------------------------------------------------&quot;

#AngularProject_path=../../OmniBuilds-CSS_and_Prelogin/Omni-Prelogin-DevBuild/dist/AngularProject/
#echo AngularProject_path $AngularProject_path

StagingBuild_AngularProject=../../OmniBuilds-CSS_and_Prelogin/Omni-Prelogin-SITBuild/dist/AngularProject/
echo StagingBuild_AngularProject $StagingBuild_AngularProject

Current_AngularProject_path=./Source/iportalweb/WebContent/AngularProject/

rm -rf $Current_AngularProject_path
rsync -avzhq $StagingBuild_AngularProject $Current_AngularProject_path || echo &quot;ignore error ...&quot;

ls -lrt $Current_AngularProject_path
echo &quot;==========================================================================&quot;</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>set +x
echo &quot;------------------------------------------------------------------------------&quot;
echo &quot;BUILD DEV EAR FILE based on release changes :: $BUILD_TIMESTAMP&quot;
echo &quot;------------------------------------------------------------------------------&quot;</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Ant plugin="ant@1.13">
      <targets></targets>
      <antName>Ant</antName>
    </hudson.tasks.Ant>
    <hudson.tasks.Shell>
      <command>set +x
echo &quot; &quot;
echo &quot;&lt;--------------------  VERSION EAR FILE  ----------------------------------&gt;&quot;
DEV_APPLICATION_NAME=CBI.DF.${DEV_AUTHOR}.DEVBUILD_ID.0$BUILD_ID.timestamp.$BUILD_TIMESTAMP

ls OUTPUT/digital*ear | awk -F/ &apos;{print $NF}&apos; | while read filename
do mv OUTPUT/&quot;$filename&quot; OUTPUT/&quot;$(echo &quot;$filename&quot; | sed -e &apos;s#digitalFaceApplication_IBMB_18.2.0.0#&apos;&quot;$DEV_APPLICATION_NAME&quot;&apos;#g&apos;)&quot;
done
ls OUTPUT/$DEV_APPLICATION_NAME*ear

echo &quot;&lt;----------- PUSHOVER-SSH ARTIFACTS TO THE WEBLOGIC SERVER  ---------------&gt;&quot;

#Clean Target location
rm -rf $BUILD_ARCHIVE_WORKSPACE/OUTPUT/CBI.DF*.ear
ssh $SSH_ENVIRONMENT rm -rf $TARGET_REMOTE_WEBLOGIC/CBI.DF*.ear || echo &quot;No such file ...&quot;

mv OUTPUT/$DEV_APPLICATION_NAME.ear $BUILD_ARCHIVE_WORKSPACE/OUTPUT/
sleep 2
scp $BUILD_ARCHIVE_WORKSPACE/OUTPUT/$DEV_APPLICATION_NAME.ear $SSH_ENVIRONMENT:$TARGET_REMOTE_WEBLOGIC

echo &quot;-----------------------------------------------------------------&quot;</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>set +x
rm -rf $WORKSPACE/*</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.43">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs class="empty-list"/>
          <projects>Dev-DBmigrate-DF,Dev-DBmigrate-CT,Dev-DBmigrate-MH</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>true</triggerWithNoParameters>
          <triggerFromChildProjects>false</triggerFromChildProjects>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <hudson.tasks.Mailer plugin="mailer@435.v79ef3972b_5c7">
      <recipients>sngachanja@co-opbank.co.ke</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>true</sendToIndividuals>
    </hudson.tasks.Mailer>
    <org.jenkinsci.plugins.discardbuild.DiscardBuildPublisher plugin="discard-old-build@1.05">
      <daysToKeep>10</daysToKeep>
      <numToKeep>100</numToKeep>
      <resultsToDiscard/>
      <minLogFileSize>-1</minLogFileSize>
      <maxLogFileSize>-1</maxLogFileSize>
      <intervalDaysToKeep>-1</intervalDaysToKeep>
      <intervalNumToKeep>-1</intervalNumToKeep>
      <regexp></regexp>
    </org.jenkinsci.plugins.discardbuild.DiscardBuildPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <EnvInjectBuildWrapper plugin="envinject@2.4.0">
      <info>
        <propertiesContent>ARCHIVE_WORKSPACE=/appData/jenkins/archive-workspace/OmniBuilds-CoreBankingIntegration
BUILD_ARCHIVE_WORKSPACE=/appData/jenkins/archive-workspace/OmniBuilds-CoreBankingIntegration/digitalFaceApplication-DevBuild
TARGET_REMOTE_WEBLOGIC=/app/appadmin/jenkins/workspace/OmniBuilds-CoreBankingIntegration/Deploy-Dev/OUTPUT
SSH_ENVIRONMENT=appadmin@172.16.19.156</propertiesContent>
        <secureGroovyScript plugin="script-security@1175.v4b_d517d6db_f0">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
    <org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper plugin="preSCMbuildstep@0.3">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>set +x
echo &quot;====================================================================&quot;

echo &quot;BUILD_USER :: $BUILD_USER&quot;
echo &quot;BUILD_USER_ID :: $BUILD_USER_ID&quot;
echo &quot;WORKSPACE :: $WORKSPACE&quot;
echo &quot;BUILD_TIMESTAMP&quot;::$BUILD_TIMESTAMP
echo &quot;DEV_GIT_BRANCH&quot;::$DEV_GIT_BRANCH

#---------------------------------------------------------------------------------------------

export TARGET=Omni.Dev
MATRIXPATH=/var/lib/jenkins/workspace/ROLE_PERMISSIONS_MATRIX
$MATRIXPATH/ROLE_PERMISSIONS_MATRIX.sh
CAPABILITIES_FILE=$MATRIXPATH/$TARGET/$BUILD_USER_ID.CAPABILITIES

FUNCTION=ENV_AUTHORIZATION_DEV
cat $CAPABILITIES_FILE || echo &quot;ERROR :: CAPABILITIES file not available&quot;
CAPABILITIES=`cat $CAPABILITIES_FILE | grep $FUNCTION` || echo &quot;WARNING :: FUNCTION $FUNCTION not available for $BUILD_USER_ID&quot;
echo &quot;BUILD_USER CAPABILITIES&quot;::$CAPABILITIES

PROPERTY_FILE=DEV_MODULE_01_variables.property
echo &quot;CAPABILITIES_FILE=$CAPABILITIES_FILE&quot; &gt;&gt; $PROPERTY_FILE

#---------------------------------------------------------------------------------------------

if [ &quot;$BUILD_USER_ID&quot; = &quot;scmChange&quot; ] || [ &quot;$CAPABILITIES&quot; = &quot;$FUNCTION&quot; ] ;
then

echo &quot; &quot;
echo &quot;=====================================================================&quot;
echo &quot;Build user $BUILD_USER Authorized to Promote to DEV &quot;
echo &quot;=====================================================================&quot;
echo &quot; &quot;
exit 0

else
echo &quot; &quot;
echo &quot;=====================================================================&quot;
echo &quot;ERROR :: Build user $BUILD_USER not Authorized to Promote to DEV &quot;
echo &quot;=====================================================================&quot;
echo &quot; &quot;
exit 1

fi


echo &quot;-------------------------------------------------------------------&quot;
pwd
start=$(date +&apos;%s&apos;)
timer_path=/var/lib/jenkins/workspace/OmniBuilds-CoreBankingIntegration/property_variables/timer.property
echo &quot;start=$start&quot; &gt; $timer_path
ls -lrt $timer_path &amp;&amp; cat $timer_path
echo &quot;-------------------------------------------------------------------&quot;
ARCHIVE_WORKSPACE=/appData/jenkins/archive-workspace/OmniBuilds-CoreBankingIntegration
BUILD_ARCHIVE_WORKSPACE=/appData/jenkins/archive-workspace/OmniBuilds-CoreBankingIntegration/digitalFaceApplication-DevBuild/

[ ! -d &quot;$ARCHIVE_WORKSPACE/changelog-DEV&quot; ] &amp;&amp; mkdir -p $ARCHIVE_WORKSPACE/changelog-DEV
[ ! -d &quot;$BUILD_ARCHIVE_WORKSPACE/OUTPUT&quot; ] &amp;&amp; mkdir -p $BUILD_ARCHIVE_WORKSPACE/OUTPUT

[ ! -d &quot;$BUILD_ARCHIVE_WORKSPACE/Dev-DBmigrate-CT/RENAMED_SCRIPTS&quot; ] &amp;&amp; mkdir -p $BUILD_ARCHIVE_WORKSPACE/Dev-DBmigrate-CT/RENAMED_SCRIPTS
[ ! -d &quot;$BUILD_ARCHIVE_WORKSPACE/Dev-DBmigrate-DF/RENAMED_SCRIPTS&quot; ] &amp;&amp; mkdir -p $BUILD_ARCHIVE_WORKSPACE/Dev-DBmigrate-DF/RENAMED_SCRIPTS
[ ! -d &quot;$BUILD_ARCHIVE_WORKSPACE/Dev-DBmigrate-MH/RENAMED_SCRIPTS&quot; ] &amp;&amp; mkdir -p $BUILD_ARCHIVE_WORKSPACE/Dev-DBmigrate-MH/RENAMED_SCRIPTS
[ ! -d &quot;$BUILD_ARCHIVE_WORKSPACE/Cummulative-Resource-bin-files&quot; ] &amp;&amp; mkdir -p $BUILD_ARCHIVE_WORKSPACE/Cummulative-Resource-bin-files
</command>
          <configuredLocalRules/>
        </hudson.tasks.Shell>
        <EnvInjectBuilder plugin="envinject@2.4.0">
          <info>
            <propertiesFilePath>/var/lib/jenkins/workspace/OmniBuilds-CoreBankingIntegration/property_variables/timer.property</propertiesFilePath>
          </info>
        </EnvInjectBuilder>
      </buildSteps>
      <failOnError>false</failOnError>
    </org.jenkinsci.plugins.preSCMbuildstep.PreSCMBuildStepsWrapper>
    <org.jenkinsci.plugins.builduser.BuildUser plugin="build-user-vars-plugin@1.8"/>
  </buildWrappers>
</project>